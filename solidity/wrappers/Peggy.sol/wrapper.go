// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package wrappers

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ValsetArgs is an auto generated low-level Go binding around an user-defined struct.
type ValsetArgs struct {
	Validators   []common.Address
	Powers       []*big.Int
	ValsetNonce  *big.Int
	RewardAmount *big.Int
	RewardToken  common.Address
}

// WrappersMetaData contains all meta data concerning the Wrappers contract.
var WrappersMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"ERC20DeployedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"SendToBfhdexEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"}],\"name\":\"TransactionBatchExecutedEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newValsetNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_eventNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewardAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"ValsetUpdatedEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_cosmosDenom\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"deployERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnershipExpiryTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_peggyId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_powerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_powers\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBfhdexNativeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwnershipExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Address\",\"type\":\"address\"}],\"name\":\"lastBatchNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnershipAfterExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_destination\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"}],\"name\":\"sendToBfhdex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"state_invalidationMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"state_lastBatchNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastEventNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetCheckpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_lastValsetNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_peggyId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state_powerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"structValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_destinations\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_fees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_batchNonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_batchTimeout\",\"type\":\"uint256\"}],\"name\":\"submitBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"structValsetArgs\",\"name\":\"_newValset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"powers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"valsetNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"internalType\":\"structValsetArgs\",\"name\":\"_currentValset\",\"type\":\"tuple\"},{\"internalType\":\"uint8[]\",\"name\":\"_v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_s\",\"type\":\"bytes32[]\"}],\"name\":\"updateValset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040525f606b555f606c553480156016575f5ffd5b505f60665f6101000a81548160ff0219169083151502179055506001606781905550616928806100455f395ff3fe608060405234801561000f575f5ffd5b506004361061014b575f3560e01c806381747418116100c1578063df97174b1161007a578063df97174b14610319578063e24eef0614610349578063e5a2b5d214610379578063f2b5330714610397578063f2fde38b146103b5578063f7955637146103d15761014b565b8063817474181461027f5780638c64865f1461029b5780638da5cb5b146102a5578063a5352f5b146102c3578063b56561fe146102df578063c359a212146102fd5761014b565b80635afe97bb116101135780635afe97bb146101cd5780635c975abb146101eb57806369dd390814610209578063715018a61461022757806373b20547146102315780637dfb6f861461024f5761014b565b8063011b21741461014f5780630637a3d61461017f5780631ee7a1081461019b5780634a4e3bd5146101b957806351858e27146101c3575b5f5ffd5b6101696004803603810190610164919061251f565b6103ed565b6040516101769190612562565b60405180910390f35b61019960048036038101906101949190612639565b610433565b005b6101a361074f565b6040516101b09190612562565b60405180910390f35b6101c1610767565b005b6101cb6107ed565b005b6101d5610873565b6040516101e291906126d7565b60405180910390f35b6101f3610883565b60405161020091906126d7565b60405180910390f35b610211610898565b60405161021e91906126ff565b60405180910390f35b61022f61089e565b005b610239610924565b6040516102469190612562565b60405180910390f35b61026960048036038101906102649190612718565b61092a565b6040516102769190612562565b60405180910390f35b61029960048036038101906102949190612bca565b61093f565b005b6102a3610ea4565b005b6102ad610ef5565b6040516102ba9190612d76565b60405180910390f35b6102dd60048036038101906102d89190612e5b565b610f1d565b005b6102e76113f1565b6040516102f49190612562565b60405180910390f35b61031760048036038101906103129190613014565b6113f7565b005b610333600480360381019061032e919061251f565b611704565b6040516103409190612562565b60405180910390f35b610363600480360381019061035e919061251f565b611719565b60405161037091906126d7565b60405180910390f35b610381611736565b60405161038e9190612562565b60405180910390f35b61039f61173c565b6040516103ac91906126ff565b60405180910390f35b6103cf60048036038101906103ca919061251f565b611742565b005b6103eb60048036038101906103e691906130b7565b6118ea565b005b5f60695f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b61043b610883565b1561047b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610472906131d5565b60405180910390fd5b6002606754036104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b79061323d565b60405180910390fd5b60026067819055505f606f5f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610588578573ffffffffffffffffffffffffffffffffffffffff16639dc29fac33866040518363ffffffff1660e01b815260040161055392919061325b565b5f604051808303815f87803b15801561056a575f5ffd5b505af115801561057c573d5f5f3e3d5ffd5b505050508390506106bc565b5f8673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105c29190612d76565b602060405180830381865afa1580156105dd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106019190613296565b90506106303330878a73ffffffffffffffffffffffffffffffffffffffff166119f8909392919063ffffffff16565b5f8773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161066a9190612d76565b602060405180830381865afa158015610685573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a99190613296565b905081816106b791906132ee565b925050505b6001606c546106cb9190613321565b606c81905550843373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f7c31906f12055908c2e2c8ffd94fc6034e445b631e004e7fbad545455732e2dd84606c548888604051610737949392919061338e565b60405180910390a45060016067819055505050505050565b5f6302f4bd006034546107629190613321565b905090565b61076f611a81565b73ffffffffffffffffffffffffffffffffffffffff1661078d610ef5565b73ffffffffffffffffffffffffffffffffffffffff16146107e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107da90613416565b60405180910390fd5b6107eb611a88565b565b6107f5611a81565b73ffffffffffffffffffffffffffffffffffffffff16610813610ef5565b73ffffffffffffffffffffffffffffffffffffffff1614610869576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086090613416565b60405180910390fd5b610871611b28565b565b5f61087c61074f565b4211905090565b5f60665f9054906101000a900460ff16905090565b606d5481565b6108a6611a81565b73ffffffffffffffffffffffffffffffffffffffff166108c4610ef5565b73ffffffffffffffffffffffffffffffffffffffff161461091a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091190613416565b60405180910390fd5b610922611bca565b565b606c5481565b606a602052805f5260405f205f915090505481565b600260675403610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b9061323d565b60405180910390fd5b6002606781905550610994610883565b156109d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cb906131d5565b60405180910390fd5b8260695f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205410610a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4a906134a4565b60405180910390fd5b804310610a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8c90613532565b60405180910390fd5b8960200151518a5f015151148015610ab1575088518a5f015151145b8015610ac1575087518a5f015151145b8015610ad1575086518a5f015151145b610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b079061359a565b60405180910390fd5b606854610b1f8b606d54611c87565b14610b5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5690613628565b60405180910390fd5b84518651148015610b71575083518651145b610bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba790613690565b60405180910390fd5b610c1e8a5f01518b602001518b8b8b606d547f7472616e73616374696f6e4261746368000000000000000000000000000000008d8d8d8d8d8d604051602001610c0098979695949392919061385e565b60405160208183030381529060405280519060200120606e54611d02565b8260695f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055505f5f5f90505b8751811015610df457606f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610d5f578373ffffffffffffffffffffffffffffffffffffffff166340c10f19888381518110610ced57610cec6138ef565b5b60200260200101518a8481518110610d0857610d076138ef565b5b60200260200101516040518363ffffffff1660e01b8152600401610d2d92919061325b565b5f604051808303815f87803b158015610d44575f5ffd5b505af1158015610d56573d5f5f3e3d5ffd5b50505050610dbf565b610dbe878281518110610d7557610d746138ef565b5b6020026020010151898381518110610d9057610d8f6138ef565b5b60200260200101518673ffffffffffffffffffffffffffffffffffffffff16611e769092919063ffffffff16565b5b858181518110610dd257610dd16138ef565b5b602002602001015182610de59190613321565b91508080600101915050610c66565b505f811115610e2957610e2833828573ffffffffffffffffffffffffffffffffffffffff16611e769092919063ffffffff16565b5b506001606c54610e399190613321565b606c819055508173ffffffffffffffffffffffffffffffffffffffff16837f02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708606c54604051610e889190612562565b60405180910390a3600160678190555050505050505050505050565b610eac610873565b610eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee290613966565b60405180910390fd5b610ef3611bca565b565b5f60335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f25610883565b15610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c906131d5565b60405180910390fd5b8660400135886040013511610faf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa6906139f4565b60405180910390fd5b878060200190610fbf9190613a1e565b905088805f0190610fd09190613a80565b905014611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990613b2c565b60405180910390fd5b8680602001906110229190613a1e565b905087805f01906110339190613a80565b905014801561105457508585905087805f01906110509190613a80565b9050145b801561107257508383905087805f019061106e9190613a80565b9050145b801561109057508181905087805f019061108c9190613a80565b9050145b6110cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c69061359a565b60405180910390fd5b6068546110e7886110df90613b4a565b606d54611c87565b14611127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111e90613628565b60405180910390fd5b5f61113d8961113590613b4a565b606d54611c87565b90506112ab88805f01906111519190613a80565b808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f820116905080830192505050505050508980602001906111a09190613a1e565b808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f820116905080830192505050505050508989808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f820116905080830192505050505050508888808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f820116905080830192505050505050508787808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f8201169050808301925050505050505086606e54611d02565b806068819055508860400135606b819055505f73ffffffffffffffffffffffffffffffffffffffff168960800160208101906112e7919061251f565b73ffffffffffffffffffffffffffffffffffffffff161415801561130f57505f896060013514155b1561135657611355338a606001358b6080016020810190611330919061251f565b73ffffffffffffffffffffffffffffffffffffffff16611e769092919063ffffffff16565b5b6001606c546113659190613321565b606c8190555088604001357f76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a606c548b606001358c60800160208101906113ac919061251f565b8d805f01906113bb9190613a80565b8f80602001906113cb9190613a1e565b6040516113de9796959493929190613c4a565b60405180910390a2505050505050505050565b606b5481565b5f60019054906101000a900460ff168061141c57505f5f9054906101000a900460ff16155b61145b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161145290613d1d565b60405180910390fd5b5f5f60019054906101000a900460ff1615905080156114a85760015f60016101000a81548160ff02191690831515021790555060015f5f6101000a81548160ff0219169083151502179055505b6114b0611efc565b6114b8611fd0565b828290508585905014611500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f79061359a565b60405180910390fd5b5f5f90505f5f90505b8484905081101561154f57848482818110611527576115266138ef565b5b90506020020135826115399190613321565b915087821161154f578080600101915050611509565b50868111611592576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158990613dab565b60405180910390fd5b61159a612465565b6040518060a001604052808888808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f8201169050808301925050505050505081526020018686808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f8201169050808301925050505050505081526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090505f611664828b611c87565b905089606d8190555088606e81905550806068819055506001606c5461168a9190613321565b606c81905550606b547f76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a606c545f5f8c8c8c8c6040516116d09796959493929190613e02565b60405180910390a250505080156116fb575f5f60016101000a81548160ff0219169083151502179055505b50505050505050565b6069602052805f5260405f205f915090505481565b606f602052805f5260405f205f915054906101000a900460ff1681565b606e5481565b60685481565b61174a611a81565b73ffffffffffffffffffffffffffffffffffffffff16611768610ef5565b73ffffffffffffffffffffffffffffffffffffffff16146117be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b590613416565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361182c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182390613ed5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f85858585856040516118fc906124a7565b61190a959493929190613f02565b604051809103905ff080158015611923573d5f5f3e3d5ffd5b5090506001606f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506001606c5461198a9190613321565b606c819055508073ffffffffffffffffffffffffffffffffffffffff167f82fe3a4fa49c6382d0c085746698ddbbafe6c2bf61285b19410644b5b26287c789898989898989606c546040516119e6989796959493929190613f49565b60405180910390a25050505050505050565b611a7b846323b872dd60e01b858585604051602401611a1993929190613fb5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612151565b50505050565b5f33905090565b611a90610883565b611acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac690614034565b60405180910390fd5b5f60665f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611b11611a81565b604051611b1e9190612d76565b60405180910390a1565b611b30610883565b15611b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b67906131d5565b60405180910390fd5b600160665f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bb3611a81565b604051611bc09190612d76565b60405180910390a1565b5f73ffffffffffffffffffffffffffffffffffffffff1660335f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35f60335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f5f7f636865636b706f696e74000000000000000000000000000000000000000000005f1b90505f83828660400151875f0151886020015189606001518a60800151604051602001611cdf9796959493929190614052565b604051602081830303815290604052805190602001209050809250505092915050565b5f5f90505f5f90505b8851811015611e29575f878281518110611d2857611d276138ef565b5b602002602001015160ff1614611e1c57611dad898281518110611d4e57611d4d6138ef565b5b602002602001015185898481518110611d6a57611d696138ef565b5b6020026020010151898581518110611d8557611d846138ef565b5b6020026020010151898681518110611da057611d9f6138ef565b5b6020026020010151612216565b611dec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de39061413d565b60405180910390fd5b878181518110611dff57611dfe6138ef565b5b602002602001015182611e129190613321565b9150828211611e29575b8080600101915050611d0b565b50818111611e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6390613dab565b60405180910390fd5b5050505050505050565b611ef78363a9059cbb60e01b8484604051602401611e9592919061325b565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612151565b505050565b5f60019054906101000a900460ff1680611f2157505f5f9054906101000a900460ff16155b611f60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5790613d1d565b60405180910390fd5b5f5f60019054906101000a900460ff161590508015611fad5760015f60016101000a81548160ff02191690831515021790555060015f5f6101000a81548160ff0219169083151502179055505b8015611fcd575f5f60016101000a81548160ff0219169083151502179055505b50565b5f60019054906101000a900460ff1680611ff557505f5f9054906101000a900460ff16155b612034576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202b90613d1d565b60405180910390fd5b5f5f60019054906101000a900460ff1615905080156120815760015f60016101000a81548160ff02191690831515021790555060015f5f6101000a81548160ff0219169083151502179055505b5f61208a611a81565b90508060335f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426034819055508073ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350801561214e575f5f60016101000a81548160ff0219169083151502179055505b50565b5f6121b2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122c79092919063ffffffff16565b90505f8151111561221157808060200190518101906121d19190614185565b612210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220790614220565b60405180910390fd5b5b505050565b5f5f8560405160200161222991906142b2565b6040516020818303038152906040528051906020012090506001818686866040515f815260200160405260405161226394939291906142d7565b6020604051602081039080840390855afa158015612283573d5f5f3e3d5ffd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161491505095945050505050565b60606122d584845f856122de565b90509392505050565b606082471015612323576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231a9061438a565b60405180910390fd5b61232c856123ee565b61236b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612362906143f2565b60405180910390fd5b5f5f8673ffffffffffffffffffffffffffffffffffffffff1685876040516123939190614462565b5f6040518083038185875af1925050503d805f81146123cd576040519150601f19603f3d011682016040523d82523d5f602084013e6123d2565b606091505b50915091506123e28282866123ff565b92505050949350505050565b5f5f823b90505f8111915050919050565b6060831561240f5782905061245e565b5f835111156124215782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161245591906144ba565b60405180910390fd5b9392505050565b6040518060a0016040528060608152602001606081526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b612418806144db83390190565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6124ee826124c5565b9050919050565b6124fe816124e4565b8114612508575f5ffd5b50565b5f81359050612519816124f5565b92915050565b5f60208284031215612534576125336124bd565b5b5f6125418482850161250b565b91505092915050565b5f819050919050565b61255c8161254a565b82525050565b5f6020820190506125755f830184612553565b92915050565b5f819050919050565b61258d8161257b565b8114612597575f5ffd5b50565b5f813590506125a881612584565b92915050565b6125b78161254a565b81146125c1575f5ffd5b50565b5f813590506125d2816125ae565b92915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f8401126125f9576125f86125d8565b5b8235905067ffffffffffffffff811115612616576126156125dc565b5b602083019150836001820283011115612632576126316125e0565b5b9250929050565b5f5f5f5f5f60808688031215612652576126516124bd565b5b5f61265f8882890161250b565b95505060206126708882890161259a565b9450506040612681888289016125c4565b935050606086013567ffffffffffffffff8111156126a2576126a16124c1565b5b6126ae888289016125e4565b92509250509295509295909350565b5f8115159050919050565b6126d1816126bd565b82525050565b5f6020820190506126ea5f8301846126c8565b92915050565b6126f98161257b565b82525050565b5f6020820190506127125f8301846126f0565b92915050565b5f6020828403121561272d5761272c6124bd565b5b5f61273a8482850161259a565b91505092915050565b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61278d82612747565b810181811067ffffffffffffffff821117156127ac576127ab612757565b5b80604052505050565b5f6127be6124b4565b90506127ca8282612784565b919050565b5f5ffd5b5f67ffffffffffffffff8211156127ed576127ec612757565b5b602082029050602081019050919050565b5f61281061280b846127d3565b6127b5565b90508083825260208201905060208402830185811115612833576128326125e0565b5b835b8181101561285c5780612848888261250b565b845260208401935050602081019050612835565b5050509392505050565b5f82601f83011261287a576128796125d8565b5b813561288a8482602086016127fe565b91505092915050565b5f67ffffffffffffffff8211156128ad576128ac612757565b5b602082029050602081019050919050565b5f6128d06128cb84612893565b6127b5565b905080838252602082019050602084028301858111156128f3576128f26125e0565b5b835b8181101561291c578061290888826125c4565b8452602084019350506020810190506128f5565b5050509392505050565b5f82601f83011261293a576129396125d8565b5b813561294a8482602086016128be565b91505092915050565b5f60a0828403121561296857612967612743565b5b61297260a06127b5565b90505f82013567ffffffffffffffff811115612991576129906127cf565b5b61299d84828501612866565b5f83015250602082013567ffffffffffffffff8111156129c0576129bf6127cf565b5b6129cc84828501612926565b60208301525060406129e0848285016125c4565b60408301525060606129f4848285016125c4565b6060830152506080612a088482850161250b565b60808301525092915050565b5f67ffffffffffffffff821115612a2e57612a2d612757565b5b602082029050602081019050919050565b5f60ff82169050919050565b612a5481612a3f565b8114612a5e575f5ffd5b50565b5f81359050612a6f81612a4b565b92915050565b5f612a87612a8284612a14565b6127b5565b90508083825260208201905060208402830185811115612aaa57612aa96125e0565b5b835b81811015612ad35780612abf8882612a61565b845260208401935050602081019050612aac565b5050509392505050565b5f82601f830112612af157612af06125d8565b5b8135612b01848260208601612a75565b91505092915050565b5f67ffffffffffffffff821115612b2457612b23612757565b5b602082029050602081019050919050565b5f612b47612b4284612b0a565b6127b5565b90508083825260208201905060208402830185811115612b6a57612b696125e0565b5b835b81811015612b935780612b7f888261259a565b845260208401935050602081019050612b6c565b5050509392505050565b5f82601f830112612bb157612bb06125d8565b5b8135612bc1848260208601612b35565b91505092915050565b5f5f5f5f5f5f5f5f5f5f6101408b8d031215612be957612be86124bd565b5b5f8b013567ffffffffffffffff811115612c0657612c056124c1565b5b612c128d828e01612953565b9a505060208b013567ffffffffffffffff811115612c3357612c326124c1565b5b612c3f8d828e01612add565b99505060408b013567ffffffffffffffff811115612c6057612c5f6124c1565b5b612c6c8d828e01612b9d565b98505060608b013567ffffffffffffffff811115612c8d57612c8c6124c1565b5b612c998d828e01612b9d565b97505060808b013567ffffffffffffffff811115612cba57612cb96124c1565b5b612cc68d828e01612926565b96505060a08b013567ffffffffffffffff811115612ce757612ce66124c1565b5b612cf38d828e01612866565b95505060c08b013567ffffffffffffffff811115612d1457612d136124c1565b5b612d208d828e01612926565b94505060e0612d318d828e016125c4565b935050610100612d438d828e0161250b565b925050610120612d558d828e016125c4565b9150509295989b9194979a5092959850565b612d70816124e4565b82525050565b5f602082019050612d895f830184612d67565b92915050565b5f5ffd5b5f60a08284031215612da857612da7612d8f565b5b81905092915050565b5f5f83601f840112612dc657612dc56125d8565b5b8235905067ffffffffffffffff811115612de357612de26125dc565b5b602083019150836020820283011115612dff57612dfe6125e0565b5b9250929050565b5f5f83601f840112612e1b57612e1a6125d8565b5b8235905067ffffffffffffffff811115612e3857612e376125dc565b5b602083019150836020820283011115612e5457612e536125e0565b5b9250929050565b5f5f5f5f5f5f5f5f60a0898b031215612e7757612e766124bd565b5b5f89013567ffffffffffffffff811115612e9457612e936124c1565b5b612ea08b828c01612d93565b985050602089013567ffffffffffffffff811115612ec157612ec06124c1565b5b612ecd8b828c01612d93565b975050604089013567ffffffffffffffff811115612eee57612eed6124c1565b5b612efa8b828c01612db1565b9650965050606089013567ffffffffffffffff811115612f1d57612f1c6124c1565b5b612f298b828c01612e06565b9450945050608089013567ffffffffffffffff811115612f4c57612f4b6124c1565b5b612f588b828c01612e06565b92509250509295985092959890939650565b5f5f83601f840112612f7f57612f7e6125d8565b5b8235905067ffffffffffffffff811115612f9c57612f9b6125dc565b5b602083019150836020820283011115612fb857612fb76125e0565b5b9250929050565b5f5f83601f840112612fd457612fd36125d8565b5b8235905067ffffffffffffffff811115612ff157612ff06125dc565b5b60208301915083602082028301111561300d5761300c6125e0565b5b9250929050565b5f5f5f5f5f5f6080878903121561302e5761302d6124bd565b5b5f61303b89828a0161259a565b965050602061304c89828a016125c4565b955050604087013567ffffffffffffffff81111561306d5761306c6124c1565b5b61307989828a01612f6a565b9450945050606087013567ffffffffffffffff81111561309c5761309b6124c1565b5b6130a889828a01612fbf565b92509250509295509295509295565b5f5f5f5f5f5f5f6080888a0312156130d2576130d16124bd565b5b5f88013567ffffffffffffffff8111156130ef576130ee6124c1565b5b6130fb8a828b016125e4565b9750975050602088013567ffffffffffffffff81111561311e5761311d6124c1565b5b61312a8a828b016125e4565b9550955050604088013567ffffffffffffffff81111561314d5761314c6124c1565b5b6131598a828b016125e4565b9350935050606061316c8a828b01612a61565b91505092959891949750929550565b5f82825260208201905092915050565b7f5061757361626c653a20706175736564000000000000000000000000000000005f82015250565b5f6131bf60108361317b565b91506131ca8261318b565b602082019050919050565b5f6020820190508181035f8301526131ec816131b3565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c005f82015250565b5f613227601f8361317b565b9150613232826131f3565b602082019050919050565b5f6020820190508181035f8301526132548161321b565b9050919050565b5f60408201905061326e5f830185612d67565b61327b6020830184612553565b9392505050565b5f81519050613290816125ae565b92915050565b5f602082840312156132ab576132aa6124bd565b5b5f6132b884828501613282565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6132f88261254a565b91506133038361254a565b925082820390508181111561331b5761331a6132c1565b5b92915050565b5f61332b8261254a565b91506133368361254a565b925082820190508082111561334e5761334d6132c1565b5b92915050565b828183375f83830152505050565b5f61336d838561317b565b935061337a838584613354565b61338383612747565b840190509392505050565b5f6060820190506133a15f830187612553565b6133ae6020830186612553565b81810360408301526133c1818486613362565b905095945050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f61340060208361317b565b915061340b826133cc565b602082019050919050565b5f6020820190508181035f83015261342d816133f4565b9050919050565b7f4e6577206261746368206e6f6e6365206d7573742062652067726561746572205f8201527f7468616e207468652063757272656e74206e6f6e636500000000000000000000602082015250565b5f61348e60368361317b565b915061349982613434565b604082019050919050565b5f6020820190508181035f8301526134bb81613482565b9050919050565b7f42617463682074696d656f7574206d75737420626520677265617465722074685f8201527f616e207468652063757272656e7420626c6f636b206865696768740000000000602082015250565b5f61351c603b8361317b565b9150613527826134c2565b604082019050919050565b5f6020820190508181035f83015261354981613510565b9050919050565b7f4d616c666f726d65642063757272656e742076616c696461746f7220736574005f82015250565b5f613584601f8361317b565b915061358f82613550565b602082019050919050565b5f6020820190508181035f8301526135b181613578565b9050919050565b7f537570706c6965642063757272656e742076616c696461746f727320616e64205f8201527f706f7765727320646f206e6f74206d6174636820636865636b706f696e742e00602082015250565b5f613612603f8361317b565b915061361d826135b8565b604082019050919050565b5f6020820190508181035f83015261363f81613606565b9050919050565b7f4d616c666f726d6564206261746368206f66207472616e73616374696f6e73005f82015250565b5f61367a601f8361317b565b915061368582613646565b602082019050919050565b5f6020820190508181035f8301526136a78161366e565b9050919050565b5f819050919050565b5f819050919050565b5f6136da6136d56136d0846136ae565b6136b7565b61254a565b9050919050565b6136ea816136c0565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6137228161254a565b82525050565b5f6137338383613719565b60208301905092915050565b5f602082019050919050565b5f613755826136f0565b61375f81856136fa565b935061376a8361370a565b805f5b8381101561379a5781516137818882613728565b975061378c8361373f565b92505060018101905061376d565b5085935050505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6137d9816124e4565b82525050565b5f6137ea83836137d0565b60208301905092915050565b5f602082019050919050565b5f61380c826137a7565b61381681856137b1565b9350613821836137c1565b805f5b8381101561385157815161383888826137df565b9750613843836137f6565b925050600181019050613824565b5085935050505092915050565b5f610100820190506138725f83018b6126f0565b61387f602083018a6136e1565b8181036040830152613891818961374b565b905081810360608301526138a58188613802565b905081810360808301526138b9818761374b565b90506138c860a0830186612553565b6138d560c0830185612d67565b6138e260e0830184612553565b9998505050505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4f776e657273686970206e6f74207965742065787069726564000000000000005f82015250565b5f61395060198361317b565b915061395b8261391c565b602082019050919050565b5f6020820190508181035f83015261397d81613944565b9050919050565b7f4e65772076616c736574206e6f6e6365206d75737420626520677265617465725f8201527f207468616e207468652063757272656e74206e6f6e6365000000000000000000602082015250565b5f6139de60378361317b565b91506139e982613984565b604082019050919050565b5f6020820190508181035f830152613a0b816139d2565b9050919050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83356001602003843603038112613a3a57613a39613a12565b5b80840192508235915067ffffffffffffffff821115613a5c57613a5b613a16565b5b602083019250602082023603831315613a7857613a77613a1a565b5b509250929050565b5f5f83356001602003843603038112613a9c57613a9b613a12565b5b80840192508235915067ffffffffffffffff821115613abe57613abd613a16565b5b602083019250602082023603831315613ada57613ad9613a1a565b5b509250929050565b7f4d616c666f726d6564206e65772076616c696461746f722073657400000000005f82015250565b5f613b16601b8361317b565b9150613b2182613ae2565b602082019050919050565b5f6020820190508181035f830152613b4381613b0a565b9050919050565b5f613b553683612953565b9050919050565b5f819050919050565b5f613b73602084018461250b565b905092915050565b5f602082019050919050565b5f613b9283856137b1565b9350613b9d82613b5c565b805f5b85811015613bd557613bb28284613b65565b613bbc88826137df565b9750613bc783613b7b565b925050600181019050613ba0565b5085925050509392505050565b5f5ffd5b82818337505050565b5f613bfa83856136fa565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613c2d57613c2c613be2565b5b602083029250613c3e838584613be6565b82840190509392505050565b5f60a082019050613c5d5f83018a612553565b613c6a6020830189612553565b613c776040830188612d67565b8181036060830152613c8a818688613b87565b90508181036080830152613c9f818486613bef565b905098975050505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f613d07602e8361317b565b9150613d1282613cad565b604082019050919050565b5f6020820190508181035f830152613d3481613cfb565b9050919050565b7f5375626d69747465642076616c696461746f7220736574207369676e617475725f8201527f657320646f206e6f74206861766520656e6f75676820706f7765722e00000000602082015250565b5f613d95603c8361317b565b9150613da082613d3b565b604082019050919050565b5f6020820190508181035f830152613dc281613d89565b9050919050565b5f819050919050565b5f613dec613de7613de284613dc9565b6136b7565b61254a565b9050919050565b613dfc81613dd2565b82525050565b5f60a082019050613e155f83018a612553565b613e226020830189613df3565b613e2f6040830188612d67565b8181036060830152613e42818688613b87565b90508181036080830152613e57818486613bef565b905098975050505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f613ebf60268361317b565b9150613eca82613e65565b604082019050919050565b5f6020820190508181035f830152613eec81613eb3565b9050919050565b613efc81612a3f565b82525050565b5f6060820190508181035f830152613f1b818789613362565b90508181036020830152613f30818587613362565b9050613f3f6040830184613ef3565b9695505050505050565b5f60a0820190508181035f830152613f62818a8c613362565b90508181036020830152613f7781888a613362565b90508181036040830152613f8c818688613362565b9050613f9b6060830185613ef3565b613fa86080830184612553565b9998505050505050505050565b5f606082019050613fc85f830186612d67565b613fd56020830185612d67565b613fe26040830184612553565b949350505050565b7f5061757361626c653a206e6f74207061757365640000000000000000000000005f82015250565b5f61401e60148361317b565b915061402982613fea565b602082019050919050565b5f6020820190508181035f83015261404b81614012565b9050919050565b5f60e0820190506140655f83018a6126f0565b61407260208301896126f0565b61407f6040830188612553565b81810360608301526140918187613802565b905081810360808301526140a5818661374b565b90506140b460a0830185612553565b6140c160c0830184612d67565b98975050505050505050565b7f56616c696461746f72207369676e617475726520646f6573206e6f74206d61745f8201527f63682e0000000000000000000000000000000000000000000000000000000000602082015250565b5f61412760238361317b565b9150614132826140cd565b604082019050919050565b5f6020820190508181035f8301526141548161411b565b9050919050565b614164816126bd565b811461416e575f5ffd5b50565b5f8151905061417f8161415b565b92915050565b5f6020828403121561419a576141996124bd565b5b5f6141a784828501614171565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e5f8201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b5f61420a602a8361317b565b9150614215826141b0565b604082019050919050565b5f6020820190508181035f830152614237816141fe565b9050919050565b5f81905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f82015250565b5f61427c601c8361423e565b915061428782614248565b601c82019050919050565b5f819050919050565b6142ac6142a78261257b565b614292565b82525050565b5f6142bc82614270565b91506142c8828461429b565b60208201915081905092915050565b5f6080820190506142ea5f8301876126f0565b6142f76020830186613ef3565b61430460408301856126f0565b61431160608301846126f0565b95945050505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f5f8201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b5f61437460268361317b565b915061437f8261431a565b604082019050919050565b5f6020820190508181035f8301526143a181614368565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000005f82015250565b5f6143dc601d8361317b565b91506143e7826143a8565b602082019050919050565b5f6020820190508181035f830152614409816143d0565b9050919050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61443c82614410565b614446818561441a565b9350614456818560208601614424565b80840191505092915050565b5f61446d8284614432565b915081905092915050565b5f81519050919050565b5f61448c82614478565b614496818561317b565b93506144a6818560208601614424565b6144af81612747565b840191505092915050565b5f6020820190508181035f8301526144d28184614482565b90509291505056fe60a060405234801561000f575f5ffd5b50604051612418380380612418833981810160405281019061003191906102a1565b828281600390816100429190610539565b5080600490816100529190610539565b5050505f61006461011760201b60201c565b90508060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508060ff1660808160ff1681525050505050610608565b5f33905090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61017d82610137565b810181811067ffffffffffffffff8211171561019c5761019b610147565b5b80604052505050565b5f6101ae61011e565b90506101ba8282610174565b919050565b5f67ffffffffffffffff8211156101d9576101d8610147565b5b6101e282610137565b9050602081019050919050565b8281835e5f83830152505050565b5f61020f61020a846101bf565b6101a5565b90508281526020810184848401111561022b5761022a610133565b5b6102368482856101ef565b509392505050565b5f82601f8301126102525761025161012f565b5b81516102628482602086016101fd565b91505092915050565b5f60ff82169050919050565b6102808161026b565b811461028a575f5ffd5b50565b5f8151905061029b81610277565b92915050565b5f5f5f606084860312156102b8576102b7610127565b5b5f84015167ffffffffffffffff8111156102d5576102d461012b565b5b6102e18682870161023e565b935050602084015167ffffffffffffffff8111156103025761030161012b565b5b61030e8682870161023e565b925050604061031f8682870161028d565b9150509250925092565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061037757607f821691505b60208210810361038a57610389610333565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026103ec7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826103b1565b6103f686836103b1565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f61043a6104356104308461040e565b610417565b61040e565b9050919050565b5f819050919050565b61045383610420565b61046761045f82610441565b8484546103bd565b825550505050565b5f5f905090565b61047e61046f565b61048981848461044a565b505050565b5b818110156104ac576104a15f82610476565b60018101905061048f565b5050565b601f8211156104f1576104c281610390565b6104cb846103a2565b810160208510156104da578190505b6104ee6104e6856103a2565b83018261048e565b50505b505050565b5f82821c905092915050565b5f6105115f19846008026104f6565b1980831691505092915050565b5f6105298383610502565b9150826002028217905092915050565b61054282610329565b67ffffffffffffffff81111561055b5761055a610147565b5b6105658254610360565b6105708282856104b0565b5f60209050601f8311600181146105a1575f841561058f578287015190505b610599858261051e565b865550610600565b601f1984166105af86610390565b5f5b828110156105d6578489015182556001820191506020850194506020810190506105b1565b868310156105f357848901516105ef601f891682610502565b8355505b6001600288020188555050505b505050505050565b608051611df86106205f395f6104fa0152611df85ff3fe608060405234801561000f575f5ffd5b50600436106100fe575f3560e01c8063715018a611610095578063a457c2d711610064578063a457c2d71461029a578063a9059cbb146102ca578063dd62ed3e146102fa578063f2fde38b1461032a576100fe565b8063715018a6146102385780638da5cb5b1461024257806395d89b41146102605780639dc29fac1461027e576100fe565b8063313ce567116100d1578063313ce5671461019e57806339509351146101bc57806340c10f19146101ec57806370a0823114610208576100fe565b806306fdde0314610102578063095ea7b31461012057806318160ddd1461015057806323b872dd1461016e575b5f5ffd5b61010a610346565b6040516101179190611417565b60405180910390f35b61013a600480360381019061013591906114c8565b6103d6565b6040516101479190611520565b60405180910390f35b6101586103f3565b6040516101659190611548565b60405180910390f35b61018860048036038101906101839190611561565b6103fc565b6040516101959190611520565b60405180910390f35b6101a66104f7565b6040516101b391906115cc565b60405180910390f35b6101d660048036038101906101d191906114c8565b61051e565b6040516101e39190611520565b60405180910390f35b610206600480360381019061020191906114c8565b6105c5565b005b610222600480360381019061021d91906115e5565b61064f565b60405161022f9190611548565b60405180910390f35b610240610694565b005b61024a61071a565b604051610257919061161f565b60405180910390f35b610268610742565b6040516102759190611417565b60405180910390f35b610298600480360381019061029391906114c8565b6107d2565b005b6102b460048036038101906102af91906114c8565b61085c565b6040516102c19190611520565b60405180910390f35b6102e460048036038101906102df91906114c8565b61094b565b6040516102f19190611520565b60405180910390f35b610314600480360381019061030f9190611638565b610968565b6040516103219190611548565b60405180910390f35b610344600480360381019061033f91906115e5565b6109ea565b005b606060038054610355906116a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610381906116a3565b80156103cc5780601f106103a3576101008083540402835291602001916103cc565b820191905f5260205f20905b8154815290600101906020018083116103af57829003601f168201915b5050505050905090565b5f6103e96103e2610b92565b8484610b99565b6001905092915050565b5f600254905090565b5f610408848484610d5c565b5f60015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f61044f610b92565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050828110156104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590611743565b60405180910390fd5b6104eb856104da610b92565b85846104e6919061178e565b610b99565b60019150509392505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000905090565b5f6105bb61052a610b92565b848460015f610537610b92565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20546105b691906117c1565b610b99565b6001905092915050565b6105cd610b92565b73ffffffffffffffffffffffffffffffffffffffff166105eb61071a565b73ffffffffffffffffffffffffffffffffffffffff1614610641576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106389061183e565b60405180910390fd5b61064b8282610fcf565b5050565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b61069c610b92565b73ffffffffffffffffffffffffffffffffffffffff166106ba61071a565b73ffffffffffffffffffffffffffffffffffffffff1614610710576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107079061183e565b60405180910390fd5b61071861111b565b565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610751906116a3565b80601f016020809104026020016040519081016040528092919081815260200182805461077d906116a3565b80156107c85780601f1061079f576101008083540402835291602001916107c8565b820191905f5260205f20905b8154815290600101906020018083116107ab57829003601f168201915b5050505050905090565b6107da610b92565b73ffffffffffffffffffffffffffffffffffffffff166107f861071a565b73ffffffffffffffffffffffffffffffffffffffff161461084e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108459061183e565b60405180910390fd5b61085882826111d8565b5050565b5f5f60015f610869610b92565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905082811015610923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091a906118cc565b60405180910390fd5b61094061092e610b92565b85858461093b919061178e565b610b99565b600191505092915050565b5f61095e610957610b92565b8484610d5c565b6001905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b6109f2610b92565b73ffffffffffffffffffffffffffffffffffffffff16610a1061071a565b73ffffffffffffffffffffffffffffffffffffffff1614610a66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5d9061183e565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ad4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acb9061195a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a38060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfe906119e8565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6c90611a76565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610d4f9190611548565b60405180910390a3505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc190611b04565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2f90611b92565b60405180910390fd5b610e438383836113a2565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd90611c20565b60405180910390fd5b8181610ed2919061178e565b5f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f828254610f5d91906117c1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610fc19190611548565b60405180910390a350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361103d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103490611c88565b60405180910390fd5b6110485f83836113a2565b8060025f82825461105991906117c1565b92505081905550805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546110ab91906117c1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161110f9190611548565b60405180910390a35050565b5f73ffffffffffffffffffffffffffffffffffffffff1660055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35f60055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611246576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123d90611d16565b60405180910390fd5b611251825f836113a2565b5f5f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156112d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cb90611da4565b60405180910390fd5b81816112e0919061178e565b5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508160025f828254611331919061178e565b925050819055505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516113959190611548565b60405180910390a3505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6113e9826113a7565b6113f381856113b1565b93506114038185602086016113c1565b61140c816113cf565b840191505092915050565b5f6020820190508181035f83015261142f81846113df565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6114648261143b565b9050919050565b6114748161145a565b811461147e575f5ffd5b50565b5f8135905061148f8161146b565b92915050565b5f819050919050565b6114a781611495565b81146114b1575f5ffd5b50565b5f813590506114c28161149e565b92915050565b5f5f604083850312156114de576114dd611437565b5b5f6114eb85828601611481565b92505060206114fc858286016114b4565b9150509250929050565b5f8115159050919050565b61151a81611506565b82525050565b5f6020820190506115335f830184611511565b92915050565b61154281611495565b82525050565b5f60208201905061155b5f830184611539565b92915050565b5f5f5f6060848603121561157857611577611437565b5b5f61158586828701611481565b935050602061159686828701611481565b92505060406115a7868287016114b4565b9150509250925092565b5f60ff82169050919050565b6115c6816115b1565b82525050565b5f6020820190506115df5f8301846115bd565b92915050565b5f602082840312156115fa576115f9611437565b5b5f61160784828501611481565b91505092915050565b6116198161145a565b82525050565b5f6020820190506116325f830184611610565b92915050565b5f5f6040838503121561164e5761164d611437565b5b5f61165b85828601611481565b925050602061166c85828601611481565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806116ba57607f821691505b6020821081036116cd576116cc611676565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320615f8201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b5f61172d6028836113b1565b9150611738826116d3565b604082019050919050565b5f6020820190508181035f83015261175a81611721565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61179882611495565b91506117a383611495565b92508282039050818111156117bb576117ba611761565b5b92915050565b5f6117cb82611495565b91506117d683611495565b92508282019050808211156117ee576117ed611761565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f6118286020836113b1565b9150611833826117f4565b602082019050919050565b5f6020820190508181035f8301526118558161181c565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f6118b66025836113b1565b91506118c18261185c565b604082019050919050565b5f6020820190508181035f8301526118e3816118aa565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f6119446026836113b1565b915061194f826118ea565b604082019050919050565b5f6020820190508181035f83015261197181611938565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f6119d26024836113b1565b91506119dd82611978565b604082019050919050565b5f6020820190508181035f8301526119ff816119c6565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f611a606022836113b1565b9150611a6b82611a06565b604082019050919050565b5f6020820190508181035f830152611a8d81611a54565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f611aee6025836113b1565b9150611af982611a94565b604082019050919050565b5f6020820190508181035f830152611b1b81611ae2565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f611b7c6023836113b1565b9150611b8782611b22565b604082019050919050565b5f6020820190508181035f830152611ba981611b70565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611c0a6026836113b1565b9150611c1582611bb0565b604082019050919050565b5f6020820190508181035f830152611c3781611bfe565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f611c72601f836113b1565b9150611c7d82611c3e565b602082019050919050565b5f6020820190508181035f830152611c9f81611c66565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f206164647265735f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f611d006021836113b1565b9150611d0b82611ca6565b604082019050919050565b5f6020820190508181035f830152611d2d81611cf4565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e5f8201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b5f611d8e6022836113b1565b9150611d9982611d34565b604082019050919050565b5f6020820190508181035f830152611dbb81611d82565b905091905056fea264697066735822122047375fc26111182ecb8bbb9437b03b5524766af107f4e0ec6fa4b1514c08f90d64736f6c634300081c0033a26469706673582212201e42bdb5b03edda1009d6cadc99752f2fb024b16917359ccc90acd5fa4253cec64736f6c634300081c0033",
}

// WrappersABI is the input ABI used to generate the binding from.
// Deprecated: Use WrappersMetaData.ABI instead.
var WrappersABI = WrappersMetaData.ABI

// WrappersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WrappersMetaData.Bin instead.
var WrappersBin = WrappersMetaData.Bin

// DeployWrappers deploys a new Ethereum contract, binding an instance of Wrappers to it.
func DeployWrappers(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Wrappers, error) {
	parsed, err := WrappersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WrappersBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Wrappers{WrappersCaller: WrappersCaller{contract: contract}, WrappersTransactor: WrappersTransactor{contract: contract}, WrappersFilterer: WrappersFilterer{contract: contract}}, nil
}

// Wrappers is an auto generated Go binding around an Ethereum contract.
type Wrappers struct {
	WrappersCaller     // Read-only binding to the contract
	WrappersTransactor // Write-only binding to the contract
	WrappersFilterer   // Log filterer for contract events
}

// WrappersCaller is an auto generated read-only Go binding around an Ethereum contract.
type WrappersCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WrappersTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WrappersTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WrappersFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WrappersFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WrappersSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WrappersSession struct {
	Contract     *Wrappers         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WrappersCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WrappersCallerSession struct {
	Contract *WrappersCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// WrappersTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WrappersTransactorSession struct {
	Contract     *WrappersTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// WrappersRaw is an auto generated low-level Go binding around an Ethereum contract.
type WrappersRaw struct {
	Contract *Wrappers // Generic contract binding to access the raw methods on
}

// WrappersCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WrappersCallerRaw struct {
	Contract *WrappersCaller // Generic read-only contract binding to access the raw methods on
}

// WrappersTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WrappersTransactorRaw struct {
	Contract *WrappersTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWrappers creates a new instance of Wrappers, bound to a specific deployed contract.
func NewWrappers(address common.Address, backend bind.ContractBackend) (*Wrappers, error) {
	contract, err := bindWrappers(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Wrappers{WrappersCaller: WrappersCaller{contract: contract}, WrappersTransactor: WrappersTransactor{contract: contract}, WrappersFilterer: WrappersFilterer{contract: contract}}, nil
}

// NewWrappersCaller creates a new read-only instance of Wrappers, bound to a specific deployed contract.
func NewWrappersCaller(address common.Address, caller bind.ContractCaller) (*WrappersCaller, error) {
	contract, err := bindWrappers(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WrappersCaller{contract: contract}, nil
}

// NewWrappersTransactor creates a new write-only instance of Wrappers, bound to a specific deployed contract.
func NewWrappersTransactor(address common.Address, transactor bind.ContractTransactor) (*WrappersTransactor, error) {
	contract, err := bindWrappers(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WrappersTransactor{contract: contract}, nil
}

// NewWrappersFilterer creates a new log filterer instance of Wrappers, bound to a specific deployed contract.
func NewWrappersFilterer(address common.Address, filterer bind.ContractFilterer) (*WrappersFilterer, error) {
	contract, err := bindWrappers(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WrappersFilterer{contract: contract}, nil
}

// bindWrappers binds a generic wrapper to an already deployed contract.
func bindWrappers(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := WrappersMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wrappers *WrappersRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wrappers.Contract.WrappersCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wrappers *WrappersRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wrappers.Contract.WrappersTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wrappers *WrappersRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wrappers.Contract.WrappersTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Wrappers *WrappersCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Wrappers.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Wrappers *WrappersTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wrappers.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Wrappers *WrappersTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Wrappers.Contract.contract.Transact(opts, method, params...)
}

// GetOwnershipExpiryTimestamp is a free data retrieval call binding the contract method 0x1ee7a108.
//
// Solidity: function getOwnershipExpiryTimestamp() view returns(uint256)
func (_Wrappers *WrappersCaller) GetOwnershipExpiryTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "getOwnershipExpiryTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetOwnershipExpiryTimestamp is a free data retrieval call binding the contract method 0x1ee7a108.
//
// Solidity: function getOwnershipExpiryTimestamp() view returns(uint256)
func (_Wrappers *WrappersSession) GetOwnershipExpiryTimestamp() (*big.Int, error) {
	return _Wrappers.Contract.GetOwnershipExpiryTimestamp(&_Wrappers.CallOpts)
}

// GetOwnershipExpiryTimestamp is a free data retrieval call binding the contract method 0x1ee7a108.
//
// Solidity: function getOwnershipExpiryTimestamp() view returns(uint256)
func (_Wrappers *WrappersCallerSession) GetOwnershipExpiryTimestamp() (*big.Int, error) {
	return _Wrappers.Contract.GetOwnershipExpiryTimestamp(&_Wrappers.CallOpts)
}

// IsBfhdexNativeToken is a free data retrieval call binding the contract method 0xe24eef06.
//
// Solidity: function isBfhdexNativeToken(address ) view returns(bool)
func (_Wrappers *WrappersCaller) IsBfhdexNativeToken(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "isBfhdexNativeToken", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBfhdexNativeToken is a free data retrieval call binding the contract method 0xe24eef06.
//
// Solidity: function isBfhdexNativeToken(address ) view returns(bool)
func (_Wrappers *WrappersSession) IsBfhdexNativeToken(arg0 common.Address) (bool, error) {
	return _Wrappers.Contract.IsBfhdexNativeToken(&_Wrappers.CallOpts, arg0)
}

// IsBfhdexNativeToken is a free data retrieval call binding the contract method 0xe24eef06.
//
// Solidity: function isBfhdexNativeToken(address ) view returns(bool)
func (_Wrappers *WrappersCallerSession) IsBfhdexNativeToken(arg0 common.Address) (bool, error) {
	return _Wrappers.Contract.IsBfhdexNativeToken(&_Wrappers.CallOpts, arg0)
}

// IsOwnershipExpired is a free data retrieval call binding the contract method 0x5afe97bb.
//
// Solidity: function isOwnershipExpired() view returns(bool)
func (_Wrappers *WrappersCaller) IsOwnershipExpired(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "isOwnershipExpired")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwnershipExpired is a free data retrieval call binding the contract method 0x5afe97bb.
//
// Solidity: function isOwnershipExpired() view returns(bool)
func (_Wrappers *WrappersSession) IsOwnershipExpired() (bool, error) {
	return _Wrappers.Contract.IsOwnershipExpired(&_Wrappers.CallOpts)
}

// IsOwnershipExpired is a free data retrieval call binding the contract method 0x5afe97bb.
//
// Solidity: function isOwnershipExpired() view returns(bool)
func (_Wrappers *WrappersCallerSession) IsOwnershipExpired() (bool, error) {
	return _Wrappers.Contract.IsOwnershipExpired(&_Wrappers.CallOpts)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_Wrappers *WrappersCaller) LastBatchNonce(opts *bind.CallOpts, _erc20Address common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "lastBatchNonce", _erc20Address)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_Wrappers *WrappersSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _Wrappers.Contract.LastBatchNonce(&_Wrappers.CallOpts, _erc20Address)
}

// LastBatchNonce is a free data retrieval call binding the contract method 0x011b2174.
//
// Solidity: function lastBatchNonce(address _erc20Address) view returns(uint256)
func (_Wrappers *WrappersCallerSession) LastBatchNonce(_erc20Address common.Address) (*big.Int, error) {
	return _Wrappers.Contract.LastBatchNonce(&_Wrappers.CallOpts, _erc20Address)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wrappers *WrappersCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wrappers *WrappersSession) Owner() (common.Address, error) {
	return _Wrappers.Contract.Owner(&_Wrappers.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Wrappers *WrappersCallerSession) Owner() (common.Address, error) {
	return _Wrappers.Contract.Owner(&_Wrappers.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Wrappers *WrappersCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Wrappers *WrappersSession) Paused() (bool, error) {
	return _Wrappers.Contract.Paused(&_Wrappers.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Wrappers *WrappersCallerSession) Paused() (bool, error) {
	return _Wrappers.Contract.Paused(&_Wrappers.CallOpts)
}

// StateInvalidationMapping is a free data retrieval call binding the contract method 0x7dfb6f86.
//
// Solidity: function state_invalidationMapping(bytes32 ) view returns(uint256)
func (_Wrappers *WrappersCaller) StateInvalidationMapping(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "state_invalidationMapping", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateInvalidationMapping is a free data retrieval call binding the contract method 0x7dfb6f86.
//
// Solidity: function state_invalidationMapping(bytes32 ) view returns(uint256)
func (_Wrappers *WrappersSession) StateInvalidationMapping(arg0 [32]byte) (*big.Int, error) {
	return _Wrappers.Contract.StateInvalidationMapping(&_Wrappers.CallOpts, arg0)
}

// StateInvalidationMapping is a free data retrieval call binding the contract method 0x7dfb6f86.
//
// Solidity: function state_invalidationMapping(bytes32 ) view returns(uint256)
func (_Wrappers *WrappersCallerSession) StateInvalidationMapping(arg0 [32]byte) (*big.Int, error) {
	return _Wrappers.Contract.StateInvalidationMapping(&_Wrappers.CallOpts, arg0)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_Wrappers *WrappersCaller) StateLastBatchNonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "state_lastBatchNonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_Wrappers *WrappersSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _Wrappers.Contract.StateLastBatchNonces(&_Wrappers.CallOpts, arg0)
}

// StateLastBatchNonces is a free data retrieval call binding the contract method 0xdf97174b.
//
// Solidity: function state_lastBatchNonces(address ) view returns(uint256)
func (_Wrappers *WrappersCallerSession) StateLastBatchNonces(arg0 common.Address) (*big.Int, error) {
	return _Wrappers.Contract.StateLastBatchNonces(&_Wrappers.CallOpts, arg0)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_Wrappers *WrappersCaller) StateLastEventNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "state_lastEventNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_Wrappers *WrappersSession) StateLastEventNonce() (*big.Int, error) {
	return _Wrappers.Contract.StateLastEventNonce(&_Wrappers.CallOpts)
}

// StateLastEventNonce is a free data retrieval call binding the contract method 0x73b20547.
//
// Solidity: function state_lastEventNonce() view returns(uint256)
func (_Wrappers *WrappersCallerSession) StateLastEventNonce() (*big.Int, error) {
	return _Wrappers.Contract.StateLastEventNonce(&_Wrappers.CallOpts)
}

// StateLastValsetCheckpoint is a free data retrieval call binding the contract method 0xf2b53307.
//
// Solidity: function state_lastValsetCheckpoint() view returns(bytes32)
func (_Wrappers *WrappersCaller) StateLastValsetCheckpoint(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "state_lastValsetCheckpoint")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StateLastValsetCheckpoint is a free data retrieval call binding the contract method 0xf2b53307.
//
// Solidity: function state_lastValsetCheckpoint() view returns(bytes32)
func (_Wrappers *WrappersSession) StateLastValsetCheckpoint() ([32]byte, error) {
	return _Wrappers.Contract.StateLastValsetCheckpoint(&_Wrappers.CallOpts)
}

// StateLastValsetCheckpoint is a free data retrieval call binding the contract method 0xf2b53307.
//
// Solidity: function state_lastValsetCheckpoint() view returns(bytes32)
func (_Wrappers *WrappersCallerSession) StateLastValsetCheckpoint() ([32]byte, error) {
	return _Wrappers.Contract.StateLastValsetCheckpoint(&_Wrappers.CallOpts)
}

// StateLastValsetNonce is a free data retrieval call binding the contract method 0xb56561fe.
//
// Solidity: function state_lastValsetNonce() view returns(uint256)
func (_Wrappers *WrappersCaller) StateLastValsetNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "state_lastValsetNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StateLastValsetNonce is a free data retrieval call binding the contract method 0xb56561fe.
//
// Solidity: function state_lastValsetNonce() view returns(uint256)
func (_Wrappers *WrappersSession) StateLastValsetNonce() (*big.Int, error) {
	return _Wrappers.Contract.StateLastValsetNonce(&_Wrappers.CallOpts)
}

// StateLastValsetNonce is a free data retrieval call binding the contract method 0xb56561fe.
//
// Solidity: function state_lastValsetNonce() view returns(uint256)
func (_Wrappers *WrappersCallerSession) StateLastValsetNonce() (*big.Int, error) {
	return _Wrappers.Contract.StateLastValsetNonce(&_Wrappers.CallOpts)
}

// StatePeggyId is a free data retrieval call binding the contract method 0x69dd3908.
//
// Solidity: function state_peggyId() view returns(bytes32)
func (_Wrappers *WrappersCaller) StatePeggyId(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "state_peggyId")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// StatePeggyId is a free data retrieval call binding the contract method 0x69dd3908.
//
// Solidity: function state_peggyId() view returns(bytes32)
func (_Wrappers *WrappersSession) StatePeggyId() ([32]byte, error) {
	return _Wrappers.Contract.StatePeggyId(&_Wrappers.CallOpts)
}

// StatePeggyId is a free data retrieval call binding the contract method 0x69dd3908.
//
// Solidity: function state_peggyId() view returns(bytes32)
func (_Wrappers *WrappersCallerSession) StatePeggyId() ([32]byte, error) {
	return _Wrappers.Contract.StatePeggyId(&_Wrappers.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_Wrappers *WrappersCaller) StatePowerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Wrappers.contract.Call(opts, &out, "state_powerThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_Wrappers *WrappersSession) StatePowerThreshold() (*big.Int, error) {
	return _Wrappers.Contract.StatePowerThreshold(&_Wrappers.CallOpts)
}

// StatePowerThreshold is a free data retrieval call binding the contract method 0xe5a2b5d2.
//
// Solidity: function state_powerThreshold() view returns(uint256)
func (_Wrappers *WrappersCallerSession) StatePowerThreshold() (*big.Int, error) {
	return _Wrappers.Contract.StatePowerThreshold(&_Wrappers.CallOpts)
}

// DeployERC20 is a paid mutator transaction binding the contract method 0xf7955637.
//
// Solidity: function deployERC20(string _cosmosDenom, string _name, string _symbol, uint8 _decimals) returns()
func (_Wrappers *WrappersTransactor) DeployERC20(opts *bind.TransactOpts, _cosmosDenom string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "deployERC20", _cosmosDenom, _name, _symbol, _decimals)
}

// DeployERC20 is a paid mutator transaction binding the contract method 0xf7955637.
//
// Solidity: function deployERC20(string _cosmosDenom, string _name, string _symbol, uint8 _decimals) returns()
func (_Wrappers *WrappersSession) DeployERC20(_cosmosDenom string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _Wrappers.Contract.DeployERC20(&_Wrappers.TransactOpts, _cosmosDenom, _name, _symbol, _decimals)
}

// DeployERC20 is a paid mutator transaction binding the contract method 0xf7955637.
//
// Solidity: function deployERC20(string _cosmosDenom, string _name, string _symbol, uint8 _decimals) returns()
func (_Wrappers *WrappersTransactorSession) DeployERC20(_cosmosDenom string, _name string, _symbol string, _decimals uint8) (*types.Transaction, error) {
	return _Wrappers.Contract.DeployERC20(&_Wrappers.TransactOpts, _cosmosDenom, _name, _symbol, _decimals)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Wrappers *WrappersTransactor) EmergencyPause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "emergencyPause")
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Wrappers *WrappersSession) EmergencyPause() (*types.Transaction, error) {
	return _Wrappers.Contract.EmergencyPause(&_Wrappers.TransactOpts)
}

// EmergencyPause is a paid mutator transaction binding the contract method 0x51858e27.
//
// Solidity: function emergencyPause() returns()
func (_Wrappers *WrappersTransactorSession) EmergencyPause() (*types.Transaction, error) {
	return _Wrappers.Contract.EmergencyPause(&_Wrappers.TransactOpts)
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Wrappers *WrappersTransactor) EmergencyUnpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "emergencyUnpause")
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Wrappers *WrappersSession) EmergencyUnpause() (*types.Transaction, error) {
	return _Wrappers.Contract.EmergencyUnpause(&_Wrappers.TransactOpts)
}

// EmergencyUnpause is a paid mutator transaction binding the contract method 0x4a4e3bd5.
//
// Solidity: function emergencyUnpause() returns()
func (_Wrappers *WrappersTransactorSession) EmergencyUnpause() (*types.Transaction, error) {
	return _Wrappers.Contract.EmergencyUnpause(&_Wrappers.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc359a212.
//
// Solidity: function initialize(bytes32 _peggyId, uint256 _powerThreshold, address[] _validators, uint256[] _powers) returns()
func (_Wrappers *WrappersTransactor) Initialize(opts *bind.TransactOpts, _peggyId [32]byte, _powerThreshold *big.Int, _validators []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "initialize", _peggyId, _powerThreshold, _validators, _powers)
}

// Initialize is a paid mutator transaction binding the contract method 0xc359a212.
//
// Solidity: function initialize(bytes32 _peggyId, uint256 _powerThreshold, address[] _validators, uint256[] _powers) returns()
func (_Wrappers *WrappersSession) Initialize(_peggyId [32]byte, _powerThreshold *big.Int, _validators []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _Wrappers.Contract.Initialize(&_Wrappers.TransactOpts, _peggyId, _powerThreshold, _validators, _powers)
}

// Initialize is a paid mutator transaction binding the contract method 0xc359a212.
//
// Solidity: function initialize(bytes32 _peggyId, uint256 _powerThreshold, address[] _validators, uint256[] _powers) returns()
func (_Wrappers *WrappersTransactorSession) Initialize(_peggyId [32]byte, _powerThreshold *big.Int, _validators []common.Address, _powers []*big.Int) (*types.Transaction, error) {
	return _Wrappers.Contract.Initialize(&_Wrappers.TransactOpts, _peggyId, _powerThreshold, _validators, _powers)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wrappers *WrappersTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wrappers *WrappersSession) RenounceOwnership() (*types.Transaction, error) {
	return _Wrappers.Contract.RenounceOwnership(&_Wrappers.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Wrappers *WrappersTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Wrappers.Contract.RenounceOwnership(&_Wrappers.TransactOpts)
}

// RenounceOwnershipAfterExpiry is a paid mutator transaction binding the contract method 0x8c64865f.
//
// Solidity: function renounceOwnershipAfterExpiry() returns()
func (_Wrappers *WrappersTransactor) RenounceOwnershipAfterExpiry(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "renounceOwnershipAfterExpiry")
}

// RenounceOwnershipAfterExpiry is a paid mutator transaction binding the contract method 0x8c64865f.
//
// Solidity: function renounceOwnershipAfterExpiry() returns()
func (_Wrappers *WrappersSession) RenounceOwnershipAfterExpiry() (*types.Transaction, error) {
	return _Wrappers.Contract.RenounceOwnershipAfterExpiry(&_Wrappers.TransactOpts)
}

// RenounceOwnershipAfterExpiry is a paid mutator transaction binding the contract method 0x8c64865f.
//
// Solidity: function renounceOwnershipAfterExpiry() returns()
func (_Wrappers *WrappersTransactorSession) RenounceOwnershipAfterExpiry() (*types.Transaction, error) {
	return _Wrappers.Contract.RenounceOwnershipAfterExpiry(&_Wrappers.TransactOpts)
}

// SendToBfhdex is a paid mutator transaction binding the contract method 0x0637a3d6.
//
// Solidity: function sendToBfhdex(address _tokenContract, bytes32 _destination, uint256 _amount, string _data) returns()
func (_Wrappers *WrappersTransactor) SendToBfhdex(opts *bind.TransactOpts, _tokenContract common.Address, _destination [32]byte, _amount *big.Int, _data string) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "sendToBfhdex", _tokenContract, _destination, _amount, _data)
}

// SendToBfhdex is a paid mutator transaction binding the contract method 0x0637a3d6.
//
// Solidity: function sendToBfhdex(address _tokenContract, bytes32 _destination, uint256 _amount, string _data) returns()
func (_Wrappers *WrappersSession) SendToBfhdex(_tokenContract common.Address, _destination [32]byte, _amount *big.Int, _data string) (*types.Transaction, error) {
	return _Wrappers.Contract.SendToBfhdex(&_Wrappers.TransactOpts, _tokenContract, _destination, _amount, _data)
}

// SendToBfhdex is a paid mutator transaction binding the contract method 0x0637a3d6.
//
// Solidity: function sendToBfhdex(address _tokenContract, bytes32 _destination, uint256 _amount, string _data) returns()
func (_Wrappers *WrappersTransactorSession) SendToBfhdex(_tokenContract common.Address, _destination [32]byte, _amount *big.Int, _data string) (*types.Transaction, error) {
	return _Wrappers.Contract.SendToBfhdex(&_Wrappers.TransactOpts, _tokenContract, _destination, _amount, _data)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x81747418.
//
// Solidity: function submitBatch((address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256 _batchNonce, address _tokenContract, uint256 _batchTimeout) returns()
func (_Wrappers *WrappersTransactor) SubmitBatch(opts *bind.TransactOpts, _currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _batchNonce *big.Int, _tokenContract common.Address, _batchTimeout *big.Int) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "submitBatch", _currentValset, _v, _r, _s, _amounts, _destinations, _fees, _batchNonce, _tokenContract, _batchTimeout)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x81747418.
//
// Solidity: function submitBatch((address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256 _batchNonce, address _tokenContract, uint256 _batchTimeout) returns()
func (_Wrappers *WrappersSession) SubmitBatch(_currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _batchNonce *big.Int, _tokenContract common.Address, _batchTimeout *big.Int) (*types.Transaction, error) {
	return _Wrappers.Contract.SubmitBatch(&_Wrappers.TransactOpts, _currentValset, _v, _r, _s, _amounts, _destinations, _fees, _batchNonce, _tokenContract, _batchTimeout)
}

// SubmitBatch is a paid mutator transaction binding the contract method 0x81747418.
//
// Solidity: function submitBatch((address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s, uint256[] _amounts, address[] _destinations, uint256[] _fees, uint256 _batchNonce, address _tokenContract, uint256 _batchTimeout) returns()
func (_Wrappers *WrappersTransactorSession) SubmitBatch(_currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte, _amounts []*big.Int, _destinations []common.Address, _fees []*big.Int, _batchNonce *big.Int, _tokenContract common.Address, _batchTimeout *big.Int) (*types.Transaction, error) {
	return _Wrappers.Contract.SubmitBatch(&_Wrappers.TransactOpts, _currentValset, _v, _r, _s, _amounts, _destinations, _fees, _batchNonce, _tokenContract, _batchTimeout)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wrappers *WrappersTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wrappers *WrappersSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Wrappers.Contract.TransferOwnership(&_Wrappers.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Wrappers *WrappersTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Wrappers.Contract.TransferOwnership(&_Wrappers.TransactOpts, newOwner)
}

// UpdateValset is a paid mutator transaction binding the contract method 0xa5352f5b.
//
// Solidity: function updateValset((address[],uint256[],uint256,uint256,address) _newValset, (address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_Wrappers *WrappersTransactor) UpdateValset(opts *bind.TransactOpts, _newValset ValsetArgs, _currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _Wrappers.contract.Transact(opts, "updateValset", _newValset, _currentValset, _v, _r, _s)
}

// UpdateValset is a paid mutator transaction binding the contract method 0xa5352f5b.
//
// Solidity: function updateValset((address[],uint256[],uint256,uint256,address) _newValset, (address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_Wrappers *WrappersSession) UpdateValset(_newValset ValsetArgs, _currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _Wrappers.Contract.UpdateValset(&_Wrappers.TransactOpts, _newValset, _currentValset, _v, _r, _s)
}

// UpdateValset is a paid mutator transaction binding the contract method 0xa5352f5b.
//
// Solidity: function updateValset((address[],uint256[],uint256,uint256,address) _newValset, (address[],uint256[],uint256,uint256,address) _currentValset, uint8[] _v, bytes32[] _r, bytes32[] _s) returns()
func (_Wrappers *WrappersTransactorSession) UpdateValset(_newValset ValsetArgs, _currentValset ValsetArgs, _v []uint8, _r [][32]byte, _s [][32]byte) (*types.Transaction, error) {
	return _Wrappers.Contract.UpdateValset(&_Wrappers.TransactOpts, _newValset, _currentValset, _v, _r, _s)
}

// WrappersERC20DeployedEventIterator is returned from FilterERC20DeployedEvent and is used to iterate over the raw logs and unpacked data for ERC20DeployedEvent events raised by the Wrappers contract.
type WrappersERC20DeployedEventIterator struct {
	Event *WrappersERC20DeployedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WrappersERC20DeployedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappersERC20DeployedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WrappersERC20DeployedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WrappersERC20DeployedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WrappersERC20DeployedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WrappersERC20DeployedEvent represents a ERC20DeployedEvent event raised by the Wrappers contract.
type WrappersERC20DeployedEvent struct {
	CosmosDenom   string
	TokenContract common.Address
	Name          string
	Symbol        string
	Decimals      uint8
	EventNonce    *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterERC20DeployedEvent is a free log retrieval operation binding the contract event 0x82fe3a4fa49c6382d0c085746698ddbbafe6c2bf61285b19410644b5b26287c7.
//
// Solidity: event ERC20DeployedEvent(string _cosmosDenom, address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_Wrappers *WrappersFilterer) FilterERC20DeployedEvent(opts *bind.FilterOpts, _tokenContract []common.Address) (*WrappersERC20DeployedEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _Wrappers.contract.FilterLogs(opts, "ERC20DeployedEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return &WrappersERC20DeployedEventIterator{contract: _Wrappers.contract, event: "ERC20DeployedEvent", logs: logs, sub: sub}, nil
}

// WatchERC20DeployedEvent is a free log subscription operation binding the contract event 0x82fe3a4fa49c6382d0c085746698ddbbafe6c2bf61285b19410644b5b26287c7.
//
// Solidity: event ERC20DeployedEvent(string _cosmosDenom, address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_Wrappers *WrappersFilterer) WatchERC20DeployedEvent(opts *bind.WatchOpts, sink chan<- *WrappersERC20DeployedEvent, _tokenContract []common.Address) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}

	logs, sub, err := _Wrappers.contract.WatchLogs(opts, "ERC20DeployedEvent", _tokenContractRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WrappersERC20DeployedEvent)
				if err := _Wrappers.contract.UnpackLog(event, "ERC20DeployedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20DeployedEvent is a log parse operation binding the contract event 0x82fe3a4fa49c6382d0c085746698ddbbafe6c2bf61285b19410644b5b26287c7.
//
// Solidity: event ERC20DeployedEvent(string _cosmosDenom, address indexed _tokenContract, string _name, string _symbol, uint8 _decimals, uint256 _eventNonce)
func (_Wrappers *WrappersFilterer) ParseERC20DeployedEvent(log types.Log) (*WrappersERC20DeployedEvent, error) {
	event := new(WrappersERC20DeployedEvent)
	if err := _Wrappers.contract.UnpackLog(event, "ERC20DeployedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WrappersOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Wrappers contract.
type WrappersOwnershipTransferredIterator struct {
	Event *WrappersOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WrappersOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappersOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WrappersOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WrappersOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WrappersOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WrappersOwnershipTransferred represents a OwnershipTransferred event raised by the Wrappers contract.
type WrappersOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wrappers *WrappersFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*WrappersOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Wrappers.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &WrappersOwnershipTransferredIterator{contract: _Wrappers.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wrappers *WrappersFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *WrappersOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Wrappers.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WrappersOwnershipTransferred)
				if err := _Wrappers.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Wrappers *WrappersFilterer) ParseOwnershipTransferred(log types.Log) (*WrappersOwnershipTransferred, error) {
	event := new(WrappersOwnershipTransferred)
	if err := _Wrappers.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WrappersPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Wrappers contract.
type WrappersPausedIterator struct {
	Event *WrappersPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WrappersPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappersPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WrappersPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WrappersPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WrappersPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WrappersPaused represents a Paused event raised by the Wrappers contract.
type WrappersPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Wrappers *WrappersFilterer) FilterPaused(opts *bind.FilterOpts) (*WrappersPausedIterator, error) {

	logs, sub, err := _Wrappers.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &WrappersPausedIterator{contract: _Wrappers.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Wrappers *WrappersFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *WrappersPaused) (event.Subscription, error) {

	logs, sub, err := _Wrappers.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WrappersPaused)
				if err := _Wrappers.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Wrappers *WrappersFilterer) ParsePaused(log types.Log) (*WrappersPaused, error) {
	event := new(WrappersPaused)
	if err := _Wrappers.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WrappersSendToBfhdexEventIterator is returned from FilterSendToBfhdexEvent and is used to iterate over the raw logs and unpacked data for SendToBfhdexEvent events raised by the Wrappers contract.
type WrappersSendToBfhdexEventIterator struct {
	Event *WrappersSendToBfhdexEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WrappersSendToBfhdexEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappersSendToBfhdexEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WrappersSendToBfhdexEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WrappersSendToBfhdexEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WrappersSendToBfhdexEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WrappersSendToBfhdexEvent represents a SendToBfhdexEvent event raised by the Wrappers contract.
type WrappersSendToBfhdexEvent struct {
	TokenContract common.Address
	Sender        common.Address
	Destination   [32]byte
	Amount        *big.Int
	EventNonce    *big.Int
	Data          string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSendToBfhdexEvent is a free log retrieval operation binding the contract event 0x7c31906f12055908c2e2c8ffd94fc6034e445b631e004e7fbad545455732e2dd.
//
// Solidity: event SendToBfhdexEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, uint256 _amount, uint256 _eventNonce, string _data)
func (_Wrappers *WrappersFilterer) FilterSendToBfhdexEvent(opts *bind.FilterOpts, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (*WrappersSendToBfhdexEventIterator, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _Wrappers.contract.FilterLogs(opts, "SendToBfhdexEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return &WrappersSendToBfhdexEventIterator{contract: _Wrappers.contract, event: "SendToBfhdexEvent", logs: logs, sub: sub}, nil
}

// WatchSendToBfhdexEvent is a free log subscription operation binding the contract event 0x7c31906f12055908c2e2c8ffd94fc6034e445b631e004e7fbad545455732e2dd.
//
// Solidity: event SendToBfhdexEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, uint256 _amount, uint256 _eventNonce, string _data)
func (_Wrappers *WrappersFilterer) WatchSendToBfhdexEvent(opts *bind.WatchOpts, sink chan<- *WrappersSendToBfhdexEvent, _tokenContract []common.Address, _sender []common.Address, _destination [][32]byte) (event.Subscription, error) {

	var _tokenContractRule []interface{}
	for _, _tokenContractItem := range _tokenContract {
		_tokenContractRule = append(_tokenContractRule, _tokenContractItem)
	}
	var _senderRule []interface{}
	for _, _senderItem := range _sender {
		_senderRule = append(_senderRule, _senderItem)
	}
	var _destinationRule []interface{}
	for _, _destinationItem := range _destination {
		_destinationRule = append(_destinationRule, _destinationItem)
	}

	logs, sub, err := _Wrappers.contract.WatchLogs(opts, "SendToBfhdexEvent", _tokenContractRule, _senderRule, _destinationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WrappersSendToBfhdexEvent)
				if err := _Wrappers.contract.UnpackLog(event, "SendToBfhdexEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSendToBfhdexEvent is a log parse operation binding the contract event 0x7c31906f12055908c2e2c8ffd94fc6034e445b631e004e7fbad545455732e2dd.
//
// Solidity: event SendToBfhdexEvent(address indexed _tokenContract, address indexed _sender, bytes32 indexed _destination, uint256 _amount, uint256 _eventNonce, string _data)
func (_Wrappers *WrappersFilterer) ParseSendToBfhdexEvent(log types.Log) (*WrappersSendToBfhdexEvent, error) {
	event := new(WrappersSendToBfhdexEvent)
	if err := _Wrappers.contract.UnpackLog(event, "SendToBfhdexEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WrappersTransactionBatchExecutedEventIterator is returned from FilterTransactionBatchExecutedEvent and is used to iterate over the raw logs and unpacked data for TransactionBatchExecutedEvent events raised by the Wrappers contract.
type WrappersTransactionBatchExecutedEventIterator struct {
	Event *WrappersTransactionBatchExecutedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WrappersTransactionBatchExecutedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappersTransactionBatchExecutedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WrappersTransactionBatchExecutedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WrappersTransactionBatchExecutedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WrappersTransactionBatchExecutedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WrappersTransactionBatchExecutedEvent represents a TransactionBatchExecutedEvent event raised by the Wrappers contract.
type WrappersTransactionBatchExecutedEvent struct {
	BatchNonce *big.Int
	Token      common.Address
	EventNonce *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionBatchExecutedEvent is a free log retrieval operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_Wrappers *WrappersFilterer) FilterTransactionBatchExecutedEvent(opts *bind.FilterOpts, _batchNonce []*big.Int, _token []common.Address) (*WrappersTransactionBatchExecutedEventIterator, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _Wrappers.contract.FilterLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return &WrappersTransactionBatchExecutedEventIterator{contract: _Wrappers.contract, event: "TransactionBatchExecutedEvent", logs: logs, sub: sub}, nil
}

// WatchTransactionBatchExecutedEvent is a free log subscription operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_Wrappers *WrappersFilterer) WatchTransactionBatchExecutedEvent(opts *bind.WatchOpts, sink chan<- *WrappersTransactionBatchExecutedEvent, _batchNonce []*big.Int, _token []common.Address) (event.Subscription, error) {

	var _batchNonceRule []interface{}
	for _, _batchNonceItem := range _batchNonce {
		_batchNonceRule = append(_batchNonceRule, _batchNonceItem)
	}
	var _tokenRule []interface{}
	for _, _tokenItem := range _token {
		_tokenRule = append(_tokenRule, _tokenItem)
	}

	logs, sub, err := _Wrappers.contract.WatchLogs(opts, "TransactionBatchExecutedEvent", _batchNonceRule, _tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WrappersTransactionBatchExecutedEvent)
				if err := _Wrappers.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionBatchExecutedEvent is a log parse operation binding the contract event 0x02c7e81975f8edb86e2a0c038b7b86a49c744236abf0f6177ff5afc6986ab708.
//
// Solidity: event TransactionBatchExecutedEvent(uint256 indexed _batchNonce, address indexed _token, uint256 _eventNonce)
func (_Wrappers *WrappersFilterer) ParseTransactionBatchExecutedEvent(log types.Log) (*WrappersTransactionBatchExecutedEvent, error) {
	event := new(WrappersTransactionBatchExecutedEvent)
	if err := _Wrappers.contract.UnpackLog(event, "TransactionBatchExecutedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WrappersUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Wrappers contract.
type WrappersUnpausedIterator struct {
	Event *WrappersUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WrappersUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappersUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WrappersUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WrappersUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WrappersUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WrappersUnpaused represents a Unpaused event raised by the Wrappers contract.
type WrappersUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Wrappers *WrappersFilterer) FilterUnpaused(opts *bind.FilterOpts) (*WrappersUnpausedIterator, error) {

	logs, sub, err := _Wrappers.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &WrappersUnpausedIterator{contract: _Wrappers.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Wrappers *WrappersFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *WrappersUnpaused) (event.Subscription, error) {

	logs, sub, err := _Wrappers.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WrappersUnpaused)
				if err := _Wrappers.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Wrappers *WrappersFilterer) ParseUnpaused(log types.Log) (*WrappersUnpaused, error) {
	event := new(WrappersUnpaused)
	if err := _Wrappers.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WrappersValsetUpdatedEventIterator is returned from FilterValsetUpdatedEvent and is used to iterate over the raw logs and unpacked data for ValsetUpdatedEvent events raised by the Wrappers contract.
type WrappersValsetUpdatedEventIterator struct {
	Event *WrappersValsetUpdatedEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WrappersValsetUpdatedEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WrappersValsetUpdatedEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WrappersValsetUpdatedEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WrappersValsetUpdatedEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WrappersValsetUpdatedEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WrappersValsetUpdatedEvent represents a ValsetUpdatedEvent event raised by the Wrappers contract.
type WrappersValsetUpdatedEvent struct {
	NewValsetNonce *big.Int
	EventNonce     *big.Int
	RewardAmount   *big.Int
	RewardToken    common.Address
	Validators     []common.Address
	Powers         []*big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterValsetUpdatedEvent is a free log retrieval operation binding the contract event 0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a.
//
// Solidity: event ValsetUpdatedEvent(uint256 indexed _newValsetNonce, uint256 _eventNonce, uint256 _rewardAmount, address _rewardToken, address[] _validators, uint256[] _powers)
func (_Wrappers *WrappersFilterer) FilterValsetUpdatedEvent(opts *bind.FilterOpts, _newValsetNonce []*big.Int) (*WrappersValsetUpdatedEventIterator, error) {

	var _newValsetNonceRule []interface{}
	for _, _newValsetNonceItem := range _newValsetNonce {
		_newValsetNonceRule = append(_newValsetNonceRule, _newValsetNonceItem)
	}

	logs, sub, err := _Wrappers.contract.FilterLogs(opts, "ValsetUpdatedEvent", _newValsetNonceRule)
	if err != nil {
		return nil, err
	}
	return &WrappersValsetUpdatedEventIterator{contract: _Wrappers.contract, event: "ValsetUpdatedEvent", logs: logs, sub: sub}, nil
}

// WatchValsetUpdatedEvent is a free log subscription operation binding the contract event 0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a.
//
// Solidity: event ValsetUpdatedEvent(uint256 indexed _newValsetNonce, uint256 _eventNonce, uint256 _rewardAmount, address _rewardToken, address[] _validators, uint256[] _powers)
func (_Wrappers *WrappersFilterer) WatchValsetUpdatedEvent(opts *bind.WatchOpts, sink chan<- *WrappersValsetUpdatedEvent, _newValsetNonce []*big.Int) (event.Subscription, error) {

	var _newValsetNonceRule []interface{}
	for _, _newValsetNonceItem := range _newValsetNonce {
		_newValsetNonceRule = append(_newValsetNonceRule, _newValsetNonceItem)
	}

	logs, sub, err := _Wrappers.contract.WatchLogs(opts, "ValsetUpdatedEvent", _newValsetNonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WrappersValsetUpdatedEvent)
				if err := _Wrappers.contract.UnpackLog(event, "ValsetUpdatedEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValsetUpdatedEvent is a log parse operation binding the contract event 0x76d08978c024a4bf8cbb30c67fd78fcaa1827cbc533e4e175f36d07e64ccf96a.
//
// Solidity: event ValsetUpdatedEvent(uint256 indexed _newValsetNonce, uint256 _eventNonce, uint256 _rewardAmount, address _rewardToken, address[] _validators, uint256[] _powers)
func (_Wrappers *WrappersFilterer) ParseValsetUpdatedEvent(log types.Log) (*WrappersValsetUpdatedEvent, error) {
	event := new(WrappersValsetUpdatedEvent)
	if err := _Wrappers.contract.UnpackLog(event, "ValsetUpdatedEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
